"""
prompted.specifications.openai.messages

Contains type definitions used to define messages in the
OpenAI specification within the `prompted` framework.
"""

from typing import Any, List, Literal, Optional, Union
from typing_extensions import TypeAliasType
from pydantic import BaseModel, RootModel

__all__ = [
    "OpenAIMessageRole",
    "OpenAIImageUrl",
    "OpenAIInputAudio",
    "OpenAIAudioUrl",
    "OpenAIToolCallFunction",
    "OpenAIToolCall",
    "OpenAIMessageContentImagePart",
    "OpenAIMessageContentAudioPart",
    "OpenAIMessageContentTextPart",
    "OpenAIMessageContentRefusalPart",
    "OpenAIMessageContentPart",
    "OpenAISystemMessage",
    "OpenAIUserMessage",
    "OpenAIToolMessage",
    "OpenAIAssistantMessage",
    "OpenAIMessage",
]


# ------------------------------------------------------------------------------
# Generic Message Types
# ------------------------------------------------------------------------------


OpenAIMessageRole = TypeAliasType(
    "OpenAIMessageRole", Literal["user", "assistant", "tool", "system", "developer"]
)
"""
Type definition for accepted message roles within a message in the OpenAI chat completions
specification.
"""


class OpenAIImageUrl(BaseModel):
    """
    Represents the url to an image defined within a message content
    part.
    """

    url: str
    """The URL of the image."""
    detail: Optional[Literal["auto", "low", "high"]] = None
    """
    The detail level of this image.

    - `auto` lets the model decide.
    - `low` uses fewer tokens.
    - `high` uses more tokens.

    Defaults to `auto`.
    """


class OpenAIInputAudio(BaseModel):
    """
    Definition for an audio input usable within chat completion
    message content parts.
    """

    data: str
    """The base64 encoded audio data."""
    format: Optional[Literal["wav", "mp3", "opus", "flac", "aac", "m4a"]] = None
    """The format of the audio data."""


class OpenAIAudioUrl(BaseModel):
    """
    Definition for an audio input usable within chat completion
    message content parts.
    """

    url: str
    """The URL of the audio data."""


class OpenAIToolCallFunction(BaseModel):
    """
    Represents the 'function' key within a tool call in a completion
    response / assistant message.
    """

    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """
    name: str
    """The name of the function to call."""


class OpenAIToolCall(BaseModel):
    """
    A tool call within a completion response / assistant message in the
    OpenAI chat completions specification.
    """

    type: Literal["function"]
    """The type of the tool call.
    
    Currently, only `function` is supported."""
    id: str
    """The ID of the tool call."""
    function: OpenAIToolCallFunction
    """The function to call."""


# ------------------------------------------------------------------------------
# Message Content Parts
# ------------------------------------------------------------------------------


class OpenAIMessageContentImagePart(BaseModel):
    """
    A part within a chat completion message that represents/contains image
    content.
    """

    type: Literal["image_url"]
    """The type of this content part."""
    image_url: OpenAIImageUrl
    """
    The image to be sent / displayed. Represented as a
    URL.
    """


class OpenAIMessageContentAudioPart(BaseModel):
    """
    A part within a chat completion message that represents/contains audio
    content.

    NOTE: Only one of `audio_url` or `input_audio` can be used.
    """

    type: Literal["audio_url", "input_audio"]
    """The type of this content part.
    
    Can be either `audio_url` or `input_audio`."""
    audio_url: Optional[OpenAIAudioUrl] = None
    """
    The URL of the audio data.
    """
    input_audio: Optional[OpenAIInputAudio] = None
    """
    The base64 encoded audio data.
    """


class OpenAIMessageContentTextPart(BaseModel):
    """
    A part within a chat completion message that represents/contains text
    content.
    """

    type: Literal["text"]
    """The type of this content part."""
    text: str
    """The text of the message."""


class OpenAIMessageContentRefusalPart(BaseModel):
    """
    A part within a chat completion message that represents/contains refusal
    content.

    NOTE: This is a special case, only assistant messages can return
    or use refusal content parts.
    """

    type: Literal["refusal"]
    """The type of this content part."""
    refusal: str
    """The refusal message by the assistant."""


class OpenAIMessageContentPart(
    RootModel[
        OpenAIMessageContentImagePart
        | OpenAIMessageContentAudioPart
        | OpenAIMessageContentTextPart
        | OpenAIMessageContentRefusalPart
    ]
):
    """
    A part within a chat completion message that represents/contains content.
    """

    root: Union[
        OpenAIMessageContentImagePart,
        OpenAIMessageContentAudioPart,
        OpenAIMessageContentTextPart,
        OpenAIMessageContentRefusalPart,
    ]
    """The root of the message content part."""


# ------------------------------------------------------------------------------
# Message Types
# ------------------------------------------------------------------------------


class OpenAISystemMessage(BaseModel):
    """
    A system message in the OpenAI chat completions specification.
    """

    model_config = {"extra": "allow"}

    role: Literal["system"] = "system"
    """The role of this message. (Always `system`)"""
    content: Union[str, List[OpenAIMessageContentPart]]
    """
    The content of this message.
    """
    name: Optional[str] = None
    """An optional name for the participant."""


class OpenAIUserMessage(BaseModel):
    """
    A user message in the OpenAI chat completions specification.
    """

    model_config = {"extra": "allow"}

    role: Literal["user"] = "user"
    """The role of this message. (Always `user`)"""
    content: Union[str, List[OpenAIMessageContentPart]]
    """
    The content of this message.
    NOTE: User messages can not have 'None' message content.
    """
    name: Optional[str] = None
    """An optional name for the participant."""


class OpenAIToolMessage(BaseModel):
    """
    A tool message in the OpenAI chat completions specification.
    """

    model_config = {"extra": "allow"}

    role: Literal["tool"] = "tool"
    """The role of this message. (Always `tool`)"""
    content: Union[str, List[OpenAIMessageContentTextPart]]
    """The content of this message.
    Can be a string or a list of message content **TEXT** parts."""
    tool_call_id: str
    """The ID of the tool call that this message is responding to."""
    name: Optional[str] = None
    """
    Provides the model information to differentiate between participants of the same
    role.
    """


class OpenAIAssistantMessage(BaseModel):
    """
    An assistant message in the OpenAI chat completions specification.
    """

    model_config = {"extra": "allow"}

    role: Literal["assistant"]
    """The role of this message. (Always `assistant`)"""
    content: Union[
        str, List[Union[OpenAIMessageContentTextPart, OpenAIMessageContentRefusalPart]]
    ]
    """The content of this message.
    
    Can be a string or a list of message content parts.
    """
    refusal: Optional[str] = None
    """The refusal message by the assistant."""

    function_call: Optional[Any] = None
    """Function call response.
    NOTE:
    This is deprecated in favor of `tool_calls`.
    """
    tool_calls: Optional[List[OpenAIToolCall]] = None
    """Tool calls created by the assistant."""
    name: Optional[str] = None
    """
    Provides the model information to differentiate between participants of the same
    role.
    """


class OpenAIMessage(
    RootModel[
        OpenAISystemMessage
        | OpenAIUserMessage
        | OpenAIToolMessage
        | OpenAIAssistantMessage
    ]
):
    """
    A message in the OpenAI chat completions specification.
    """

    root: Union[
        OpenAISystemMessage, OpenAIUserMessage, OpenAIToolMessage, OpenAIAssistantMessage
    ]
    """The root of the message."""