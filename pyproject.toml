[project]
# ------------------------------------------------------------------------
# Base Metadata
# ------------------------------------------------------------------------

name = "prompted"
version = "0.0.12"

description = "Simple types & utilities built for the OpenAI Chat Completions API specification."
authors = [
    { name = "Hammad Saeed", email = "hvmmad@gmail.com" }
]

readme = "README.md"
license = { file = "LICENSE" }

requires-python = ">=3.10"

dependencies = [
    "cachetools>=5.5.1",
    "docstring-parser>=0.16",
    "instructor>=1.8.3",
    "litellm>=1.72.2",
    "typing-inspect>=0.9.0",
]

# ------------------------------------------------------------------------
# Optional Dependencies (Extras) - For the PUBLISHED PACKAGE
# ------------------------------------------------------------------------
[project.optional-dependencies]
mcp = [
    "mcp>=1.9.0",
]
a2a = [
    "fasta2a"
]
all = [
    "mcp>=1.9.0",
    "fasta2a",
    "litellm>=1.61.3",
    "instructor>=1.8.2",
]
samples = [
    "ipython",
    "ipykernel",
    "typer",
]


[dependency-groups]
dev = [
    # core dev tools
    # i love astral.sh
    "ruff",
    "uv",
    "rich", 
    "twine",
    # tests
    "pytest",
    "pytest-asyncio",
    # jupyter,
    "ipykernel",
    "ipython",
    # openai / anthropic / a2a is used for testing
    "openai",
    "anthropic",
    "a2a-sdk"
]


# ------------------------------------------------------------------------
# Build System & Tools (Hatch specific)
# ------------------------------------------------------------------------


[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[tool.hatch.build.targets.wheel]
packages = ["prompted"]


# == addition for zed IDE's (could be removed in future) ==
# this is used to tell zed what venv to use for the python interpreter
# assumes venv is at the root of the project
# this is purely for dev
[tool.pyright]
venvPath = "."
venv = ".venv"

[tool.uv.workspace]
members = [
    "samples/trip_planner",
    "samples/recipe_recommender",
]


# exclude docs/ dir
[tool.hatch.build]
exclude = ["docs/"]


# -----------------------------------------------------------------------------
# Ruff Rules
# -----------------------------------------------------------------------------


[tool.ruff]
line-length = 90
output-format = "grouped"
target-version = "py37"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  # isort
  "I",
  # bugbear rules
  "B",
  # remove unused imports
  "F401",
  # bare except statements
  "E722",
  # unused arguments
  "ARG",
  # print statements
  "T201",
  "T203",
  # misuse of typing.TYPE_CHECKING
  "TC004",
  # import rules
  "TID251",
]
ignore = [
  # mutable defaults
  "B006",
]
unfixable = [
  # disable auto fix for print statements
  "T201",
  "T203",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"functools.lru_cache".msg = "This function does not retain type information for the wrapped function's arguments; The `lru_cache` function from `_utils` should be used instead"

[tool.ruff.lint.isort]
length-sort = true
length-sort-straight = true
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
known-first-party = ["openai", "tests"]

[tool.ruff.lint.per-file-ignores]
"bin/**.py" = ["T201", "T203"]
"scripts/**.py" = ["T201", "T203"]
"tests/**.py" = ["T201", "T203"]
"examples/**.py" = ["T201", "T203"]
