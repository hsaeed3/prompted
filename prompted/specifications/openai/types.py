"""prompted.specifications.openai.types

Contains various types that define the specification for the
`openai` API provider for language models.
"""

from pydantic import BaseModel, RootModel
from typing import Any, Dict, List, Literal, Optional, Union
from typing_extensions import (
    TypedDict,
    Required,
    NotRequired,
    TypeAliasType
)

__all__ = [
    "OpenAIMessageRole",
    "OpenAIFunctionParameters",
    "OpenAIFunction",
    "OpenAITool",
    "OpenAIImageUrl",
    "OpenAIInputAudio",
    "OpenAIAudioUrl",
    "OpenAIToolCallFunction",
    "OpenAIToolCall",
    "OpenAIMessageContentImagePart",
    "OpenAIMessageContentAudioPart",
    "OpenAIMessageContentTextPart",
    "OpenAIMessageContentRefusalPart",
    "OpenAIMessageContentPart",
    "OpenAISystemMessage",
    "OpenAIUserMessage",
    "OpenAIToolMessage",
    "OpenAIAssistantMessage",
    "OpenAIMessage",
    "OpenAITopLogprob",
    "OpenAITokenLogprob",
    "OpenAIResponseChoiceLogprobs",
    "OpenAIResponseUsage",
    "OpenAIResponseChoice",
    "OpenAIResponse",
    "OpenAIStreamToolCall",
    "OpenAIStreamChoiceDelta",
    "OpenAIStreamChoice",
    "OpenAIStreamChunk",
    "OpenAIEmbeddingUsage",
    "OpenAIEmbedding",
]


# ------------------------------------------------------------
# Generic Aliases & Type Definitions (Non-Models)
# ------------------------------------------------------------


OpenAIMessageRole = TypeAliasType(
    "OpenAIMessageRole", Literal["user", "assistant", "tool", "system", "developer"]
)
"""
Type definition for accepted message roles within a message in the OpenAI chat completions
specification.
"""


OpenAIFunctionParameters = TypeAliasType("OpenAIFunctionParameters", Dict[str, object])
"""Type alias for the parameters within the definition for a tool/function."""


# ------------------------------------------------------------
# Tools
# ------------------------------------------------------------


from typing import TypedDict, NotRequired, Required

class OpenAIFunction(TypedDict):
    """
    A function that is defined within a tool's definition in the
    OpenAI format.
    """

    name: Required[str]
    """
    The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
    underscores and dashes, with a maximum length of 64.
    """
    parameters: Required[OpenAIFunctionParameters]
    """
    The parameters the functions accepts, described as a JSON Schema object.
    See the OpenAI guide for examples: https://platform.openai.com/docs/guides/function-calling
    and the JSON Schema reference for documentation: https://json-schema.org/understanding-json-schema/
    """
    description: NotRequired[Optional[str]]
    """
    A description of what the function does, used by the model to choose when and
    how to call the function.
    """
    strict: NotRequired[Optional[bool]]
    """
    Whether to enable strict schema adherence when generating the function call.
    If set to true, the model will follow the exact schema defined in the parameters field.
    Only a subset of JSON Schema is supported when strict is true.
    """


class OpenAITool(TypedDict):
    """
    A tool that is defined within a tool's definition in the
    OpenAI format.
    """

    type: Required[Literal["function"]]
    """
    The type of the tool. Currently, only `function` is supported.
    """
    function: Required[OpenAIFunction]
    """
    The function that the tool calls."""


class OpenAIImageUrl(TypedDict):
    """
    Represents the url to an image defined within a message content
    part.
    """

    url: Required[str]
    """The URL of the image."""
    detail: NotRequired[Optional[Literal["auto", "low", "high"]]]
    """
    The detail level of this image.

    - `auto` lets the model decide.
    - `low` uses fewer tokens.
    - `high` uses more tokens.

    Defaults to `auto`.
    """


class OpenAIInputAudio(TypedDict):
    """
    Definition for an audio input usable within chat completion
    message content parts.
    """

    data: Required[str]
    """The base64 encoded audio data."""
    format: NotRequired[Optional[Literal["wav", "mp3", "opus", "flac", "aac", "m4a"]]]
    """The format of the audio data."""


class OpenAIAudioUrl(TypedDict):
    """
    Definition for an audio input usable within chat completion
    message content parts.
    """

    url: Required[str]
    """The URL of the audio data."""


class OpenAIToolCallFunction(TypedDict):
    """
    Represents the 'function' key within a tool call in a completion
    response / assistant message.
    """

    arguments: Required[str]
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """
    name: Required[str]
    """The name of the function to call."""


class OpenAIToolCall(TypedDict):
    """
    A tool call within a completion response / assistant message in the
    OpenAI chat completions specification.
    """

    type: Required[Literal["function"]]
    """The type of the tool call.
    
    Currently, only `function` is supported."""
    id: Required[str]
    """The ID of the tool call."""
    function: Required[OpenAIToolCallFunction]
    """The function to call."""


# ------------------------------------------------------------------------------
# Message Content Parts
# ------------------------------------------------------------------------------


class OpenAIMessageContentImagePart(TypedDict):
    """
    A part within a chat completion message that represents/contains image
    content.
    """

    type: Required[Literal["image_url"]]
    """The type of this content part."""
    image_url: Required[OpenAIImageUrl]
    """
    The image to be sent / displayed. Represented as a
    URL.
    """


class OpenAIMessageContentAudioPart(TypedDict):
    """
    A part within a chat completion message that represents/contains audio
    content.

    NOTE: Only one of `audio_url` or `input_audio` can be used.
    """

    type: Required[Literal["audio_url", "input_audio"]]
    """The type of this content part.
    
    Can be either `audio_url` or `input_audio`."""
    audio_url: NotRequired[Optional[OpenAIAudioUrl]]
    """
    The URL of the audio data.
    """
    input_audio: NotRequired[Optional[OpenAIInputAudio]]
    """
    The base64 encoded audio data.
    """


class OpenAIMessageContentTextPart(TypedDict):
    """
    A part within a chat completion message that represents/contains text
    content.
    """

    type: Required[Literal["text"]]
    """The type of this content part."""
    text: Required[str]
    """The text of the message."""


class OpenAIMessageContentRefusalPart(TypedDict):
    """
    A part within a chat completion message that represents/contains refusal
    content.

    NOTE: This is a special case, only assistant messages can return
    or use refusal content parts.
    """

    type: Required[Literal["refusal"]]
    """The type of this content part."""
    refusal: Required[str]
    """The refusal message by the assistant."""


class OpenAIMessageContentPart(RootModel[
    OpenAIMessageContentImagePart
    | OpenAIMessageContentAudioPart
    | OpenAIMessageContentTextPart
    | OpenAIMessageContentRefusalPart
]):
    """
    A part within a chat completion message that represents/contains content.
    """

    root: Union[
        OpenAIMessageContentImagePart,
        OpenAIMessageContentAudioPart,
        OpenAIMessageContentTextPart,
        OpenAIMessageContentRefusalPart,
    ]
    """The root of the message content part."""


# ------------------------------------------------------------------------------
# Message Types
# ------------------------------------------------------------------------------


class OpenAISystemMessage(TypedDict):
    """
    A system message in the OpenAI chat completions specification.
    """

    role: Required[Literal["system"]]
    """The role of this message. (Always `system`)"""
    content: Required[Union[str, List[OpenAIMessageContentPart]]]
    """
    The content of this message.
    """
    name: NotRequired[Optional[str]]
    """An optional name for the participant."""


class OpenAIUserMessage(TypedDict):
    """
    A user message in the OpenAI chat completions specification.
    """

    role: Required[Literal["user"]]
    """The role of this message. (Always `user`)"""
    content: Required[Union[str, List[OpenAIMessageContentPart]]]
    """
    The content of this message.
    NOTE: User messages can not have 'None' message content.
    """
    name: NotRequired[Optional[str]]
    """An optional name for the participant."""


class OpenAIToolMessage(TypedDict):
    """
    A tool message in the OpenAI chat completions specification.
    """

    role: Required[Literal["tool"]]
    """The role of this message. (Always `tool`)"""
    content: Required[Union[str, List[OpenAIMessageContentTextPart]]]
    """The content of this message.
    Can be a string or a list of message content **TEXT** parts."""
    tool_call_id: Required[str]
    """The ID of the tool call that this message is responding to."""
    name: NotRequired[Optional[str]]
    """
    Provides the model information to differentiate between participants of the same
    role.
    """


class OpenAIAssistantMessage(TypedDict):
    """
    An assistant message in the OpenAI chat completions specification.
    """

    role: Required[Literal["assistant"]]
    """The role of this message. (Always `assistant`)"""
    content: Required[
        Union[
            str, List[Union[OpenAIMessageContentTextPart, OpenAIMessageContentRefusalPart]]
        ]
    ]
    """The content of this message.
    
    Can be a string or a list of message content parts.
    """
    refusal: NotRequired[Optional[str]]
    """The refusal message by the assistant."""

    function_call: NotRequired[Optional[Any]]
    """Function call response.
    NOTE:
    This is deprecated in favor of `tool_calls`.
    """
    tool_calls: NotRequired[Optional[List[OpenAIToolCall]]]
    """Tool calls created by the assistant."""
    name: NotRequired[Optional[str]]
    """
    Provides the model information to differentiate between participants of the same
    role.
    """


class OpenAIMessage(RootModel[
    OpenAISystemMessage
    | OpenAIUserMessage
    | OpenAIToolMessage
    | OpenAIAssistantMessage
]):
    """
    A message in the OpenAI chat completions specification.
    """

    root: Union[
        OpenAISystemMessage, OpenAIUserMessage, OpenAIToolMessage, OpenAIAssistantMessage
    ]
    """The root of the message."""


class OpenAITopLogprob(TypedDict):
    """
    Represents the log probabilities of a token chosen as the top choice.
    """
    token: Required[str]
    """
    The token.
    """
    logprob: Required[float]
    """
    The log probability of this token.
    """
    bytes: NotRequired[Optional[List[int]]]
    """
    A list of integers representing the UTF-8 bytes representation of the token.
    Useful in instances where characters are represented by multiple tokens.
    """


class OpenAITokenLogprob(TypedDict):
    """
    Represents the logprobs of a specific token, including top alternatives.
    """
    token: Required[str]
    """
    The token.
    """
    logprob: Required[float]
    """
    The log probability of this token.
    """
    top_logprobs: Required[List[OpenAITopLogprob]]
    """
    List of the most likely tokens and their logprobs, at this token position.
    In rare cases, there may be fewer than `top_logprobs` returned.
    """
    bytes: NotRequired[Optional[List[int]]]
    """
    A list of integers representing the UTF-8 bytes representation of the token.
    Useful in instances where characters are represented by multiple tokens.
    """


class OpenAIResponseChoiceLogprobs(TypedDict):
    """
    Log probability information for the choice.
    """
    content: NotRequired[Optional[List[OpenAITokenLogprob]]]
    """
    A list of message content tokens with log probability information.
    """


class OpenAIResponseUsage(TypedDict):
    """
    Represents the usage information for a completion in the
    OpenAI specification.
    """
    completion_tokens: Required[int]
    """Number of tokens in the generated completion."""
    prompt_tokens: Required[int]
    """Number of tokens in the prompt."""
    total_tokens: Required[int]
    """Total number of tokens used in the request (prompt + completion)."""


class OpenAIResponseChoice(TypedDict):
    """
    A choice within a non-streamed OpenAI chat completion response.
    """
    message: Required[OpenAIAssistantMessage]
    """The message that was generated by the model."""
    finish_reason: Required[
        Literal[
            "stop",
            "length",
            "tool_calls",
            "content_filter",
            "function_call",
        ]
    ]  # "function_call" is deprecated
    """
    The reason the model stopped generating tokens.
    - `stop`: API returned complete message, or a message terminated by a stop sequence.
    - `length`: Incomplete model output due to `max_tokens` parameter or token limit.
    - `tool_calls`: Model called a tool.
    - `content_filter`: Omitted content due to a flag from our content filters.
    - `function_call`: (Deprecated) Model called a function.
    """
    index: Required[int]
    """
    The index of this choice in the list of choices.
    """
    logprobs: NotRequired[Optional[OpenAIResponseChoiceLogprobs]]
    """
    Log probability information for the choice.
    """


class OpenAIResponse(TypedDict):
    """
    A response from an LLM in the specification of the OpenAI
    Chat Completions API.
    """
    id: Required[str]
    """
    A unique identifier for the chat completion.
    """
    choices: Required[List[OpenAIResponseChoice]]
    """
    A list of chat completion choices. Can be more than one if `n` is greater
    than 1.
    """
    created: Required[int]
    """
    The Unix timestamp (in seconds) of when the chat completion was created.
    """
    model: Required[str]
    """
    The model used for the chat completion.
    """
    object: Required[Literal["chat.completion"]]  # OpenAI SDK uses 'chat.completion'
    """
    The object type, which is always `chat.completion`.
    """
    system_fingerprint: NotRequired[Optional[str]]
    """
    This fingerprint represents the backend configuration that the model runs with.
    You can use this value to track changes in the backend before comparing output
    from different API calls.
    """
    usage: NotRequired[Optional[OpenAIResponseUsage]]
    """
    Usage statistics for the completion request.
    """


# ------------------------------------------------------------------------------
# STREAMING
# ------------------------------------------------------------------------------


class OpenAIStreamToolCall(OpenAIToolCall, total=False):
    """
    Format for tool calls in streamed chunks. This model extends
    standard tool calls by providing an 'index' field, which allows
    for identifying the tool call in the list of tool calls.
    """
    index: NotRequired[Optional[int]]
    """
    The index of the tool call in the list of tool calls.
    """


class OpenAIStreamChoiceDelta(TypedDict):
    """
    Represents the delta message content for a streaming choice.
    """
    role: NotRequired[Optional[OpenAIMessageRole]]
    """
    The role of the author of this message.
    """
    content: NotRequired[Optional[str]]
    """The contents of the chunk message."""
    tool_calls: NotRequired[Optional[List[OpenAIStreamToolCall]]]
    """
    Tool calls generated by the model. Can appear incrementally.
    Each tool call in the list can have an `index` field.
    """
    function_call: NotRequired[Optional[OpenAIToolCallFunction]]
    """
    (Deprecated) The name and arguments of a function that should be called.
    """


class OpenAIStreamChoice(TypedDict):
    """
    Represents a choice within streamed chunks in the OpenAI chat completions
    format.
    """
    delta: Required[OpenAIStreamChoiceDelta]
    """
    A chat completion delta generated by streamed model responses.
    """
    index: Required[int]
    """
    The index of this choice in the stream.
    """
    finish_reason: NotRequired[
        Optional[
            Literal[
                "stop",
                "length",
                "tool_calls",
                "content_filter",
                "function_call",
            ]
        ]
    ]  # "function_call" is deprecated
    """
    The reason the model stopped generating tokens.
    Present in the final chunk of a choice.
    """
    logprobs: NotRequired[Optional[OpenAIResponseChoiceLogprobs]]
    """
    Log probability information for the choice.
    """


class OpenAIStreamChunk(TypedDict):
    """
    A single chunk within a streamed response from an OpenAI
    chat completion.
    """
    id: Required[str]
    """
    A unique identifier for the chat completion chunk.
    """
    choices: Required[List[OpenAIStreamChoice]]
    """
    A list of chat completion choices. Can be more than one if `n` is greater
    than 1.
    """
    created: Required[int]
    """
    The Unix timestamp (in seconds) of when the chat completion chunk was created.
    """
    model: Required[str]
    """
    The model to generate the completion.
    """
    object: Required[Literal["chat.completion.chunk"]]  # OpenAI SDK uses 'chat.completion.chunk'
    """
    The object type, which is always `chat.completion.chunk`.
    """
    system_fingerprint: NotRequired[Optional[str]]
    """
    This fingerprint represents the backend configuration that the model runs with.
    You can use this value to track changes in the backend before comparing output
    from different API calls.
    """
    usage: NotRequired[Optional[OpenAIResponseUsage]]
    """
    An optional field that appears when the model is `gpt-3.5-turbo-0125` or `gpt-4-turbo-preview`
    and the `stream_options` parameter is set.
    It contains token usage statistics for the entire request, summed across all chunks.
    """


# ------------------------------------------------------------------------------
# EMBEDDINGS
# ------------------------------------------------------------------------------


class OpenAIEmbeddingUsage(TypedDict):
    """
    Represents the usage information for an embedding request in the
    OpenAI specification.
    """
    prompt_tokens: Required[int]
    """Number of tokens in the input prompt."""
    total_tokens: Required[int]
    """Total number of tokens used in the request (prompt + embedding)."""


class OpenAIEmbedding(TypedDict):
    """
    Represents an embedding vector returned by the embedding endpoint.
    """
    embedding: Required[List[float]]
    """
    The embedding vector, which is a list of floats. The length of vector depends
    on the model.
    """
    index: Required[int]
    """
    The index of the embedding in the list of embeddings.
    """
    object: Required[Literal["embedding"]]
    """
    The object type, which is always `embedding`.
    """